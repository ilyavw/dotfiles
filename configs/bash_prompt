#!/usr/bin/env bash

# Heavily inspired by @necolas's prompt: https://github.com/necolas/dotfiles
# Also borrows from @infinitwarp's bash-powerline: https://github.com/infinitewarp/bash-powerline/tree/develop

# Color ref: https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
# Color ref: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
# Special font symbol ref: https://nerdfonts.com/#cheat-sheet
# More tips: http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html

function set_prompts() {

    function prompt_virtualenv() {
        [ -n "$VIRTUAL_ENV" ] || return  # virtual env not found
        local venv="${VIRTUAL_ENV##*/}"  # strip out the path and just leave the env name
        echo -e "${1}${venv}"
    }

    function prompt_git() {
        readonly GIT_BRANCH_CHANGED_SYMBOL='+'
        readonly GIT_NEED_PUSH_SYMBOL='⇡'
        readonly GIT_NEED_PULL_SYMBOL='⇣'

        local marks=""
        local branchName=""

        # check if the current directory is in a git repository
        if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

            local git_eng="env LANG=C git" # force git output in English to make our work easier
            # get current branch name or short SHA1 hash for detached head
            local branch="$($git_eng symbolic-ref --short HEAD 2>/dev/null || $git_eng describe --tags --always 2>/dev/null)"
            [ -n "$branch" ] || return  # git branch not found

            local marks

            # branch is modified?
            [ -n "$($git_eng status --porcelain)" ] && marks+="$GIT_BRANCH_CHANGED_SYMBOL"

            # how many commits local branch is ahead/behind of remote?
            local stat="$($git_eng status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
            local aheadN="$(echo $stat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
            local behindN="$(echo $stat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
            [ -n "$aheadN" ] && marks+="$GIT_NEED_PUSH_SYMBOL$aheadN"
            [ -n "$behindN" ] && marks+="$GIT_NEED_PULL_SYMBOL$behindN"

            [ -n "${marks}" ] && marks="[${marks}]"

            # print the git branch segment without a trailing newline
            echo -e "${1}${branch}${marks}"

        else
            return
        fi
    }

    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        readonly RESET=$(tput sgr0)
        readonly BOLD=$(tput bold)

        readonly FG_BLACK=$(tput setaf 0)
        readonly FG_RED=$(tput setaf 1)
        readonly FG_GREEN=$(tput setaf 2)
        readonly FG_YELLOW=$(tput setaf 3)
        readonly FG_BLUE=$(tput setaf 4)
        readonly FG_MAGENTA=$(tput setaf 5)
        readonly FG_CYAN=$(tput setaf 6)
        readonly FG_WHITE=$(tput setaf 15)

        # 256-color mode
        readonly FG_ORANGE=$(tput setaf 208)
        readonly FG_VIOLET=$(tput setaf 201)
        readonly FG_PURPLE=$(tput setaf 128)
    else
        readonly RESET="\e[0m"
        readonly BOLD=""

        readonly FG_BLACK="\e[1;30m"
        readonly FG_RED="\e[1;31m"
        readonly FG_GREEN="\e[1;32m"
        readonly FG_YELLOW="\e[1;33m"
        readonly FG_BLUE="\e[1;34m"
        readonly FG_MAGENTA="\e[1;35m"
        readonly FG_CYAN="\e[1;36m"
        readonly FG_WHITE="\e[1;37m"

        # 256-color mode
        readonly FG_ORANGE="\e[38;5;208m"
        readonly FG_VIOLET="\e[38;5;201m"
        readonly FG_PURPLE="\e[38;5;128m"
    fi

    if fc-list | grep "DejaVuSansMono Nerd Font" >> /dev/null; then
        readonly SYMBOL_BRANCH=""
        readonly SYMBOL_PYTHON=""
    else
        readonly SYMBOL_BRANCH="☇"
        readonly SYMBOL_PYTHON="⚕"
    fi

    # build the prompt

    # logged in as root
    if [[ "$USER" == "root" ]]; then
        readonly USER_STYLE="\[$FG_RED\]"
        readonly SHELL_SYMBOL="#"
    else
        readonly USER_STYLE="\[$FG_ORANGE\]"
        readonly SHELL_SYMBOL="\$"
    fi

    # connected via ssh
    if [[ "$SSH_TTY" ]]; then
        readonly HOST_STYLE="\[$BOLD$FG_RED\]"
    else
        readonly HOST_STYLE="\[$FG_YELLOW\]"
    fi

    function setP1P2() {
        # Check the exit code of the previous command and display different
        # colors in the prompt accordingly.
        if [ $? -eq 0 ]; then
            local STATUS_SHELL="\[$FG_WHITE\]${SHELL_SYMBOL}"
        else
            local STATUS_SHELL="\[$FG_RED\]!"
        fi

        # set the terminal title to the current working directory
        PS1="\[\033]0;\w\007\]"

        PS1+="\n\[${RESET}\]\[${BOLD}\]" # newline and embolden everything to come
        PS1+="\[${USER_STYLE}\]\u" # username
        PS1+="\[${FG_WHITE}\]@"
        PS1+="\[${HOST_STYLE}\]\h" # host
        PS1+="\[${FG_WHITE}\]: "
        PS1+="\[${FG_GREEN}\]\w" # working directory
        PS1+="\$(prompt_git \" ${FG_CYAN}${SYMBOL_BRANCH}:\")" # git repository details
        PS1+="\$(prompt_virtualenv \" ${FG_MAGENTA}${SYMBOL_PYTHON}:\")" # python virtualenv details
        PS1+="\n"
        PS1+="${STATUS_SHELL} \[${RESET}\]" # $ (and reset color)

        PS2="\[${YELLOW}\]→ \[${RESET}\]"
    }

    PROMPT_COMMAND=setP1P2
}

set_prompts
unset set_prompts
