#!/usr/bin/env bash

# Heavily inspired by @necolas's prompt: https://github.com/necolas/dotfiles
# Also borrows from @infinitwarp's bash-powerline: https://github.com/infinitewarp/bash-powerline/tree/develop

# Color ref: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
# More tips: http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html

function set_prompts() {

    function prompt_virtualenv() {
        readonly PYTHON_VENV_SYMBOL='⚕'

        [ -n "$VIRTUAL_ENV" ] || return  # virtual env not found
        local venv="${VIRTUAL_ENV##*/}"  # strip out the path and just leave the env name
        echo -e "${1}${PYTHON_VENV_SYMBOL}${venv}";
    }

    function prompt_git() {
        readonly GIT_BRANCH_CHANGED_SYMBOL='+'
        readonly GIT_NEED_PUSH_SYMBOL='⇡'
        readonly GIT_NEED_PULL_SYMBOL='⇣'

        local marks=""
        local branchName=""

        # check if the current directory is in a git repository
        if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

            local git_eng="env LANG=C git" # force git output in English to make our work easier
            # get current branch name or short SHA1 hash for detached head
            local branch="$($git_eng symbolic-ref --short HEAD 2>/dev/null || $git_eng describe --tags --always 2>/dev/null)"
            [ -n "$branch" ] || return  # git branch not found

            local marks

            # branch is modified?
            [ -n "$($git_eng status --porcelain)" ] && marks+="$GIT_BRANCH_CHANGED_SYMBOL"

            # how many commits local branch is ahead/behind of remote?
            local stat="$($git_eng status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
            local aheadN="$(echo $stat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
            local behindN="$(echo $stat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
            [ -n "$aheadN" ] && marks+="$GIT_NEED_PUSH_SYMBOL$aheadN"
            [ -n "$behindN" ] && marks+="$GIT_NEED_PULL_SYMBOL$behindN"

            [ -n "${marks}" ] && marks="[${marks}]";

            # print the git branch segment without a trailing newline
            echo -e "${1}${branch}${marks} "

        else
            return
        fi
    }

    local black=""
    local blue=""
    local bold=""
    local cyan=""
    local green=""
    local orange=""
    local purple=""
    local red=""
    local reset=""
    local white=""
    local yellow=""

    local hostStyle=""
    local userStyle=""

    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        tput sgr0 # reset colors

        bold=$(tput bold)
        reset=$(tput sgr0)

        black=$(tput setaf 0);
        blue=$(tput setaf 4);
        cyan=$(tput setaf 6);
        green=$(tput setaf 2);
        light_purple=$(tput setaf 61);
        orange=$(tput setaf 9);
        magenta=$(tput setaf 5);
        purple=$(tput setaf 125);
        red=$(tput setaf 1);
        violet=$(tput setaf 13);
        white=$(tput setaf 15);
        yellow=$(tput setaf 3);
    else
        bold=""
        reset="\e[0m"

        black="\e[1;30m"
        blue="\e[1;34m"
        cyan="\e[1;36m"
        green="\e[1;32m"
        light_purple="\e[1;35m";
        magenta="\e[1;35m";
        orange="\e[1;33m"
        purple="\e[1;35m"
        red="\e[1;31m"
        white="\e[1;37m"
        yellow="\e[1;33m"
    fi

    # build the prompt

    # logged in as root
    if [[ "$USER" == "root" ]]; then
        userStyle="\[$red\]"
        shellSymbol="#"
    else
        userStyle="\[$orange\]"
        shellSymbol="\$"
    fi

    # connected via ssh
    if [[ "$SSH_TTY" ]]; then
        hostStyle="\[$bold$red\]"
    else
        hostStyle="\[$yellow\]"
    fi

    # set the terminal title to the current working directory
    PS1="\[\033]0;\w\007\]"

    PS1+="\n\[${bold}\]" # newline and embolden everything to come
    PS1+="\[$userStyle\]\u" # username
    PS1+="\[$white\]@"
    PS1+="\[$hostStyle\]\h" # host
    PS1+="\[$white\]: "
    PS1+="\[$green\]\w" # working directory
    PS1+="\$(prompt_git \"$white on $cyan\")" # git repository details
    PS1+="\$(prompt_virtualenv \"$white using $magenta\")"; # python virtualenv details
    PS1+="\n"
    PS1+="\[$white\]$shellSymbol \[$reset\]" # $ (and reset color)

    PS2="\[${yellow}\]→ \[${reset}\]"
}

PROMPT_COMMAND=set_prompts
